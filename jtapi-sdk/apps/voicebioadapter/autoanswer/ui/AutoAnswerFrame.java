package autoanswer.ui;

/*
 *  CallLog Jtapi Application
 *  Version 2.0     1/99
 *
 *  This JTAPI application, uses the core API along with some of the Avaya's
 *  extensions to the API to access functionality specific to Avaya's
 *  DEFINITY G3 PBX.
 *  This application has three purposes:
 *
 *  1) Observe a terminal to log all incoming and outgoing calls
 *     to/from the specified device.  It also displays UserToUser
 *     information associated with the call.
 *  2) The ability to make calls and send UserToUser information along
 *     with the call
 *  3) The ability to send DTMF through an active call
 *
 *  Options:
 *
 *  Tracing - when this option is enabled, all events received
 *            by the CallObserver on the terminal will be printed
 *            in the tracing area.
 *  Clear log - when this option is selected, the tracing and log area
 *              will be cleared.
 *
 *  To execute, type:
 *
 *  java CallLog
 *
 */

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.MenuShortcut;
import java.awt.Point;
import java.util.Hashtable;

import voicebioadapter.VoiceBioAdapter;

public class AutoAnswerFrame extends Frame {

	// Used for addNotify check.
	boolean fComponentsAdjusted = false;

	// {{DECLARE_CONTROLS
	java.awt.Panel panel1 = new java.awt.Panel();

	// }}

	// {{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();

	java.awt.Menu fileMenu = new java.awt.Menu();

	java.awt.MenuItem loginMenuItem = new java.awt.MenuItem();

	java.awt.MenuItem separatorMenuItem = new java.awt.MenuItem();

	java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();

	java.awt.Menu optionsMenu = new java.awt.Menu();

	java.awt.CheckboxMenuItem TracingMenuItem = new java.awt.CheckboxMenuItem(
			"Tracing");

	java.awt.MenuItem clearLogMenuItem = new java.awt.MenuItem();

	// }}
	MyTextArea trace;

	private final VoiceBioAdapter service;

	private static final long serialVersionUID = 1L;

	public AutoAnswerFrame() {
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.

		// {{INIT_CONTROLS
		setLayout(null);
		setSize(337, 180);
		setVisible(false);
		panel1.setLayout(null);
		add(panel1);
		panel1.setBounds(0, 0, 334, 179);
		setTitle("Dimensiondata - VoiceBio Adapter - v1");
		// }}
		trace = new MyTextArea();
		trace.setBounds(0, 0, 399, 169);
		panel1.add(trace);
		this.service = new VoiceBioAdapter(trace, this);
		// {{INIT_MENUS
		fileMenu.setLabel("File");
		fileMenu.add(loginMenuItem);
		loginMenuItem.setLabel("Login...");
		loginMenuItem.setShortcut(new MenuShortcut(
				java.awt.event.KeyEvent.VK_L, false));
		fileMenu.add(separatorMenuItem);
		separatorMenuItem.setLabel("-");
		fileMenu.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		mainMenuBar.add(fileMenu);
		optionsMenu.setLabel("Options");
		TracingMenuItem.setLabel("Tracing");
		TracingMenuItem.setState(false);
		optionsMenu.add(TracingMenuItem);
		optionsMenu.add(clearLogMenuItem);
		clearLogMenuItem.setLabel("Clear Log");
		mainMenuBar.add(optionsMenu);
		// $$ mainMenuBar.move(1,230);
		setMenuBar(mainMenuBar);
		// }}

		// {{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymComponent aSymComponent = new SymComponent();
		this.addComponentListener(aSymComponent);
		SymAction lSymAction = new SymAction();
		exitMenuItem.addActionListener(lSymAction);
		loginMenuItem.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		TracingMenuItem.addItemListener(lSymItem);
		clearLogMenuItem.addActionListener(lSymAction);
		// }}

		// obtain the JtapiPeer object
		service.initJtapi();
		if (!service.initJtapi()) {
			trace
					.append("Error: JtapiPeer could not be created.  Verify your Jtapi client install.\n\n");
			loginMenuItem.setEnabled(false);
			return;
		}
		TracingMenuItem.setState(true);
		trace.setState(TracingMenuItem.getState());
		try {
			// LoginDialog Create and show as modal
			(new LoginDialog(this, true, service.getServices()))
					.setVisible(true);
		} catch (Exception e) {
		}
	}

	public AutoAnswerFrame(String title) {
		this();
		setTitle(title);
	}

	/**
	 * Shows or hides the component depending on the boolean flag b.
	 * 
	 * @param b
	 *            if true, show the component; otherwise, hide the component.
	 * @see java.awt.Component#isVisible
	 */
	public void setVisible(boolean b) {
		if (b) {
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	 public static void main(String args[]) {
		try {
			// Create a new instance of our application's frame, and make it
			// visible.
			(new AutoAnswerFrame()).setVisible(true);
		} catch (Throwable t) {
			System.err.println(t);
			t.printStackTrace();
			// Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

	public void addNotify() {
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top
				+ getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++) {
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

	class SymWindow extends java.awt.event.WindowAdapter {
		public void windowClosing(java.awt.event.WindowEvent event) {
			Object object = event.getSource();
			if (object == AutoAnswerFrame.this)
				CallLog_WindowClosing(event);
		}
	}

	void CallLog_WindowClosing(java.awt.event.WindowEvent event) {
		try {
			// QuitDialog Create and show as modal
			(new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	class SymAction implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent event) {
			Object object = event.getSource();
			if (object == exitMenuItem) {
				exitMenuItem_ActionPerformed(event);
			} else if (object == loginMenuItem) {
				loginMenuItem_ActionPerformed(event);
			} else if (object == clearLogMenuItem) {
				clearLogMenuItem_ActionPerformed(event);
			}
		}
	}

	class SymComponent extends java.awt.event.ComponentAdapter {
		public void componentResized(java.awt.event.ComponentEvent event) {
			Object object = event.getSource();
			if (object == AutoAnswerFrame.this)
				CallLog_ComponentResized(event);
		}
	}

	void CallLog_ComponentResized(java.awt.event.ComponentEvent event) {
		try {
			Dimension size = this.getSize();
			panel1.setSize(size);
			trace.setSize(size.width - 8, size.height - 46);
		} catch (Exception e) {
		}
	}

	void loginMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {

		if ("Login...".equals(loginMenuItem.getLabel())) {
			try {
				// LoginDialog Create and show as modal
				(new LoginDialog(this, true, service.getServices()))
						.setVisible(true);
			} catch (Exception e) {
			}
		} else {
			service.logout();
		}
	}

	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		try {
			// QuitDialog Create and show as modal
			(new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	class SymItem implements java.awt.event.ItemListener {
		public void itemStateChanged(java.awt.event.ItemEvent event) {
			Object object = event.getSource();
			if (object == TracingMenuItem)
				TracingMenuItem_ItemStateChanged(event);
		}
	}

	void TracingMenuItem_ItemStateChanged(java.awt.event.ItemEvent event) {
		try {
			// TracingMenuItem Check the CheckboxMenuItem on condition;
			// TracingMenuItem Is CheckboxMenuItem not checked?
			trace.setState(TracingMenuItem.getState());
		} catch (Exception e) {
		}
	}

	void clearLogMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		trace.clear();
	}

	public void login(Hashtable<String, String> args) {
		service.login(args);
		loginMenuItem.setLabel("Logout");
	}
	
	/**
    * This method does the necessary initialization for our application, 
    * when the provider has been created and is in service.
    */
    public synchronized void handleProviderInService(String name) {

        notify();
        int index = name.indexOf (";log", 0);
        setTitle("Data retrieval " + name.substring (0, index));
        trace.append( "Service provider is in service.\n\n");
        loginMenuItem.setLabel("Logout");
    }

   /**
    * This method does the necessary clean-up for our application, 
    * when the session has been terminated.
    */
    public void handleProviderShutdown() {
        loginMenuItem.setLabel("Login...");
        trace.append( "Service provider is shut down.\n\n" );
    }
}
