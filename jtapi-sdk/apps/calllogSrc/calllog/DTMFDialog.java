package calllog;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.TextField;
import java.awt.event.KeyEvent;

public class DTMFDialog extends Dialog
{
	private static final long serialVersionUID = 1L;


	public DTMFDialog(Frame parent)
	{
		super(parent);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setFont(new Font("SansSerif", Font.PLAIN, 11));
		setSize(265,120);
		setVisible(false);
		mainPanel.setLayout(null);
		add(mainPanel);
		mainPanel.setFont(new Font("SansSerif", Font.PLAIN, 11));
		mainPanel.setBounds(0,0,258,117);
		destinationLabel.setText("DTMF:");
		destinationLabel.setAlignment(java.awt.Label.RIGHT);
		mainPanel.add(destinationLabel);
		destinationLabel.setFont(new Font("SansSerif", Font.PLAIN, 11));
		destinationLabel.setBounds(20,41,75,22);
		mainPanel.add(dtmfTextfield);
		dtmfTextfield.setFont(new Font("SansSerif", Font.PLAIN, 11));
		dtmfTextfield.setBounds(101,42,100,18);
		sendButton.setLabel("Send");
		mainPanel.add(sendButton);
		sendButton.setBackground(java.awt.Color.lightGray);
		sendButton.setBounds(62,90,64,21);
		cancelButton.setLabel("Cancel");
		mainPanel.add(cancelButton);
		cancelButton.setBackground(java.awt.Color.lightGray);
		cancelButton.setBounds(132,90,64,21);
		setTitle("Send DTMF");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		sendButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		SymFocus aSymFocus = new SymFocus();
		dtmfTextfield.addFocusListener(aSymFocus);
		SymKey aSymKey = new SymKey();
		dtmfTextfield.addKeyListener(aSymKey);
		//}}
		dtmfTextfield.setText (lastDTMF);
	}
	
	public DTMFDialog(Frame parent, boolean modal)
	{
		this(parent);
        setModal(modal);
        parentFrame = parent;
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;


	public DTMFDialog(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();
	
			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
		}
		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Panel mainPanel = new java.awt.Panel();
	java.awt.Label destinationLabel = new java.awt.Label();
	java.awt.TextField dtmfTextfield = new java.awt.TextField();
	java.awt.Button sendButton = new java.awt.Button();
	java.awt.Button cancelButton = new java.awt.Button();
	//}}
	Frame           parentFrame;
	static String   lastDTMF = "";

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == DTMFDialog.this)
				DTMFDialog_WindowClosing(event);
		}
	}
	
	void DTMFDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == sendButton)
				sendButton_ActionPerformed(event);
			else if (object == cancelButton)
				cancelButton_ActionPerformed(event);
		}
	}

	void sendButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			setVisible(false);
			String dtmf = this.collectInfo();
			((CallLog)parentFrame).sendDTMF ( dtmf );
			dispose();
		} catch (Exception e) {
		}
	}

	void cancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			setVisible(false);
			this.dispose();
		} catch (Exception e) {
		}
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			((TextField)object).select(0, 0);
		}

		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			((TextField)object).selectAll();
		}
	}
	
	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			switch (event.getKeyCode()) {
    	        case KeyEvent.VK_ENTER:
	                sendButton_ActionPerformed( null );
	                break;
	            case KeyEvent.VK_ESCAPE:
	                cancelButton_ActionPerformed( null );
	                break;
	            default:
	                break;
	        }
		}
	}
	
   /**
    * This method collects information provided in dialog box and calls
    * the sendDTMF method of the CallLog class
    */
    public String collectInfo() {
        String          dtmf;
        
		dtmf = dtmfTextfield.getText();

		lastDTMF = new String( dtmf );
		
		return dtmf;           
    }
}
